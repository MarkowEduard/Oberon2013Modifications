--- 1/System.Mod.txt
+++ 2/System.Mod.txt
@@ -8,6 +8,8 @@
 
   VAR W: Texts.Writer;
     pat: ARRAY 32 OF CHAR;
+    inTrap: BOOLEAN;
+    doubleTrapTask: Oberon.Task;
 
   PROCEDURE GetArg(VAR S: Texts.Scanner);
     VAR T: Texts.Text; beg, end, time: LONGINT;
@@ -397,22 +399,38 @@
     VAR u, v, w: INTEGER; mod: Modules.Module;
   BEGIN u := SYSTEM.REG(15); SYSTEM.GET(u - 4, v); w := v DIV 10H MOD 10H; (*trap number*)
     IF w = 0 THEN Kernel.New(a, b)
-    ELSE (*trap*) Texts.WriteLn(W); Texts.WriteString(W, "  pos "); Texts.WriteInt(W, v DIV 100H MOD 10000H, 4);
+    ELSE (*trap*)
+      IF ~inTrap THEN inTrap := TRUE;
+      Texts.WriteLn(W); Texts.WriteString(W, "  pos "); Texts.WriteInt(W, v DIV 100H MOD 10000H, 4);
       Texts.WriteString(W, "  TRAP"); Texts.WriteInt(W, w, 4); mod := Modules.root;
       WHILE (mod # NIL) & ((u < mod.code) OR (u >= mod.imp)) DO mod := mod.next END ;
       IF mod # NIL THEN Texts.WriteString(W, " in "); Texts.WriteString(W, mod.name) END ;
       Texts.WriteString(W, " at"); Texts.WriteHex(W, u);
-      Texts.WriteLn(W); Texts.Append(Oberon.Log, W.buf); Oberon.Reset
+      Texts.WriteLn(W); Texts.Append(Oberon.Log, W.buf)
+      ELSE Oberon.Collect(0); Oberon.Install(doubleTrapTask) END; inTrap := FALSE; Oberon.Reset
     END
   END Trap;
 
   PROCEDURE Abort;
     VAR n: INTEGER;
-  BEGIN n := SYSTEM.REG(15); Texts.WriteString(W, "  ABORT  "); Texts.WriteHex(W, n);
-    Texts.WriteLn(W); Texts.Append(Oberon.Log, W.buf); Oberon.Reset
+  BEGIN n := SYSTEM.REG(15);
+    IF ~inTrap THEN inTrap := TRUE;
+    Texts.WriteString(W, "  ABORT  "); Texts.WriteHex(W, n);
+    Texts.WriteLn(W); Texts.Append(Oberon.Log, W.buf)
+    ELSE Oberon.Collect(0); Oberon.Install(doubleTrapTask) END; inTrap := FALSE; Oberon.Reset
   END Abort;
   
+  PROCEDURE DoubleTrap;
+  BEGIN
+    IF (Kernel.allocated < Kernel.heapLim - Kernel.heapOrg - 20000H) THEN
+      Oberon.Remove(doubleTrapTask);
+      Texts.WriteLn(W); Texts.WriteString(W, "  DOUBLE TRAP");
+      Texts.WriteLn(W); Texts.Append(Oberon.Log, W.buf)
+    END
+  END DoubleTrap;
+
 BEGIN Texts.OpenWriter(W);
-  Oberon.OpenLog(TextFrames.Text("")); OpenViewers;
+  inTrap := FALSE; doubleTrapTask := Oberon.NewTask(DoubleTrap, 500);
+  Oberon.OpenLog(TextFrames.Text("")); OpenViewers;
   Kernel.Install(SYSTEM.ADR(Trap), 20H); Kernel.Install(SYSTEM.ADR(Abort), 0);
 END System.
