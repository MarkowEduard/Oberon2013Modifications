MODULE ORInspect;
  IMPORT SYSTEM, Files, Modules, Texts, Oberon;

  CONST
    Byte* = 1; Bool* = 2; Char* = 3; Int* = 4; Real* = 5; Set* = 6;
    Pointer* = 7; Proc* = 10; CharArray* = 11; ByteArray* = 12;

  VAR W: Texts.Writer;

  PROCEDURE OpenInspectSymbolFile(M: Modules.Module) : Files.File;
  VAR i: INTEGER;
    name: ARRAY 32 OF CHAR;
  BEGIN i := 0;
    WHILE M.name[i] # 0X DO name[i] := M.name[i]; INC(i) END;
    name[i] := "."; name[i+1] := "i"; name[i+2] := "s"; name[i+3] := "y"; name[i+4] := 0X
  RETURN Files.Old(name)
  END OpenInspectSymbolFile;

  PROCEDURE WriteHex (VAR W: Texts.Writer; x, len: INTEGER);
    VAR i: INTEGER; y: LONGINT;
      a: ARRAY 10 OF CHAR;
  BEGIN i := 0;
    REPEAT y := x MOD 10H;
      IF y < 10 THEN a[i] := CHR(y + 30H) ELSE a[i] := CHR(y + 37H) END;
      x := x DIV 10H; INC(i)
    UNTIL i = len;
    REPEAT DEC(i); Texts.Write(W, a[i]) UNTIL i = 0
  END WriteHex;

  PROCEDURE WriteByteArray(VAR offs, len: INTEGER);
    VAR b, b2: BYTE; cnt: INTEGER;
  BEGIN
    WHILE len > 0 DO
      SYSTEM.GET(offs, b); cnt := 0;
      REPEAT INC(cnt); INC(offs); DEC(len); SYSTEM.GET(offs, b2) UNTIL (len = 0) OR (b # b2);
      Texts.WriteString(W, " ");
      WriteHex(W, b, 2);
      IF cnt > 1 THEN Texts.WriteString(W, "*"); Texts.WriteInt(W, cnt, 1) END
    END;
    WHILE offs MOD 4 # 0 DO INC(offs) END
  END WriteByteArray;

  PROCEDURE InspectLoop(VAR R: Files.Rider; offs: INTEGER);
  VAR i, t: INTEGER; b: BYTE; r: REAL;
    buffer: ARRAY 100 OF CHAR;
  BEGIN
    Files.ReadString(R, buffer);
    WHILE buffer[0] # 0X DO
      Texts.WriteLn(W);
      Texts.Append(Oberon.Log, W.buf);
      Texts.WriteString(W, buffer);
      Files.ReadInt(R, t);
      IF (t = Byte) OR (t = Bool) OR (t = Char) THEN
        SYSTEM.GET(offs, b); i := b; INC(offs)
      ELSIF (t = Int) OR (t = Set) OR (t = Real) OR (t = Pointer) THEN
        SYSTEM.GET(offs, i); INC(offs, 4)
      END;
      IF (t = Byte) OR (t = Int) OR (t = Set) THEN
        IF t = Byte THEN
          Texts.WriteString(W, " (BYTE) = ");
        ELSIF t = Int THEN
          Texts.WriteString(W, " (INTEGER) = ");
        ELSIF t = Set THEN
          Texts.WriteString(W, " (SET) = ");
        END;
        Texts.WriteInt(W, i, 1);
        Texts.WriteString(W, " (0");
        IF t = Byte THEN WriteHex(W, i, 2) ELSE  WriteHex(W, i, 8) END;
        Texts.WriteString(W, "H)")
      ELSIF t = Bool THEN
        IF i = 0 THEN
          Texts.WriteString(W, " (BOOLEAN) = FALSE")
        ELSIF i = 1 THEN
          Texts.WriteString(W, " (BOOLEAN) = TRUE")
        ELSE
          Texts.WriteString(W, " (BOOLEAN) = INVALID (");
          Texts.WriteInt(W, i, 1);
          Texts.WriteString(W, ")")
        END
      ELSIF t = Char THEN
        Texts.WriteString(W, " (CHAR) = ");
        Texts.Write(W, 22X);
        Texts.Write(W, CHR(i));
        Texts.Write(W, 22X);
        Texts.WriteString(W, " (");
        Texts.WriteInt(W, i, 1);
        Texts.WriteString(W, ", 0");
        WriteHex(W, i, 2);
        Texts.WriteString(W, "H)")
      ELSIF t = Real THEN
        r := SYSTEM.VAL(REAL, i);
        Texts.WriteString(W, " (REAL) = ");
        Texts.WriteReal(W, r, 15);
        Texts.WriteString(W, " (0");
        WriteHex(W, i, 8);
        Texts.WriteString(W, "R)")
      ELSIF t = Pointer THEN
        IF i = 0 THEN
          Texts.WriteString(W, " (POINTER) = NIL");
        ELSE
          Texts.WriteString(W, " (POINTER) = ORInspect.HeapAddress 0");
          WriteHex(W, i, 8);
          Texts.WriteString(W, "H")
        END
      ELSIF t = Proc THEN
        Texts.WriteString(W, " (PROCEDURE)");
	INC(offs, 4)
      ELSIF t = CharArray THEN
        Files.ReadInt(R, i);
        Texts.WriteString(W, " (ARRAY ");
        Texts.WriteInt(W, i, 1);
        Texts.WriteString(W, " OF CHAR) = ");
        Texts.Write(W, 22X);
        SYSTEM.GET(offs, b);
        WHILE (i > 0) & (b # 0) DO Texts.Write(W, CHR(b)); DEC(i); INC(offs); SYSTEM.GET(offs, b) END;
        Texts.Write(W, 22X);
        WriteByteArray(offs, i)
      ELSIF t = ByteArray THEN
        Files.ReadInt(R, i);
        Texts.WriteString(W, " (ARRAY ");
        Texts.WriteInt(W, i, 1);
        Texts.WriteString(W, " OF BYTE) =");
        WriteByteArray(offs, i)
      ELSE
        ASSERT(FALSE)
      END;
      Files.ReadString(R, buffer);
    END
  END InspectLoop;

  PROCEDURE Module*;
    VAR offs, beg, end, time: INTEGER;
      T: Texts.Text;
      F: Files.File;
      R: Files.Rider;
      S: Texts.Scanner;
      M: Modules.Module;
  BEGIN Texts.OpenScanner(S, Oberon.Par.text, Oberon.Par.pos); Texts.Scan(S);
    IF (S.class = Texts.Char) & (S.c = "^") THEN
      Oberon.GetSelection(T, beg, end, time);
      IF time >= 0 THEN
        Texts.OpenScanner(S, T, beg); Texts.Scan(S);
      END
    END;
    IF S.class = Texts.Name THEN
      Texts.WriteString(W, "ORInspect.Module "); Texts.WriteString(W, S.s);
      M := Modules.root;
      WHILE (M # NIL) & (M.name # S.s) DO M := M.next END;
      IF M = NIL THEN
        Texts.WriteLn(W);
        Texts.WriteString(W, "Module not loaded");
      ELSE
        F := OpenInspectSymbolFile(M);
        IF F = NIL THEN
          Texts.WriteLn(W);
          Texts.WriteString(W, M.name);
          Texts.WriteString(W, ".isy not found");
        ELSE
          Files.Set(R, F, 0);
          Files.ReadInt(R, offs);
          Files.Set(R, F, offs);
          Files.ReadInt(R, offs);
          InspectLoop(R, M.data + offs);
        END
      END;
      Texts.WriteLn(W); Texts.WriteLn(W);
      Texts.Append(Oberon.Log, W.buf);
    END
  END Module;


  PROCEDURE HeapAddress*;
    VAR offs, i, j, time: INTEGER;
      T: Texts.Text;
      F: Files.File;
      R: Files.Rider;
      S: Texts.Scanner;
      M: Modules.Module;
      name: ARRAY 32 OF CHAR;
  BEGIN Texts.OpenScanner(S, Oberon.Par.text, Oberon.Par.pos); Texts.Scan(S);
    IF (S.class = Texts.Char) & (S.c = "^") THEN
      Oberon.GetSelection(T, i, j, time);
      IF time >= 0 THEN
        Texts.OpenScanner(S, T, i); Texts.Scan(S);
      END
    END;
    IF S.class = Texts.Int THEN
      offs := S.i;
      IF offs = 0 THEN i := 0 ELSE SYSTEM.GET(offs-8, i) END;
      Texts.WriteString(W, "ORInspect.HeapAddress 0"); WriteHex(W, offs, 8);
      Texts.WriteString(W, "H");
      M := Modules.root;
      WHILE (M # NIL) & ((i < M.data) OR (i >= M.code)) DO M := M.next END;
      IF M = NIL THEN
        Texts.WriteLn(W);
        Texts.WriteString(W, "Invalid type descriptor ");
        WriteHex(W, i, 8);
      ELSE
        F := OpenInspectSymbolFile(M);
        IF F = NIL THEN
          Texts.WriteLn(W);
          Texts.WriteString(W, M.name);
          Texts.WriteString(W, ".isy not found");
        ELSE
          i := i - M.data;
          Texts.WriteLn(W);
          Texts.WriteString(W, "Type descriptor: ");
          Texts.WriteString(W, M.name);
          Texts.WriteString(W, "+");
          WriteHex(W, i, 8);
          Texts.WriteLn(W);
          Files.Set(R, F, 4);
          Files.ReadInt(R, j);
          WHILE (j # -1) & (j # i) DO Files.ReadInt(R, j); Files.ReadInt(R, j) END;
          IF j = -1 THEN
            Texts.WriteString(W, "Type descriptor not in .isy file");
          ELSE
            Files.ReadInt(R, j);
            Files.Set(R, F, j);
          END;
          Texts.WriteString(W, "Type: ");
          Texts.WriteString(W, M.name);
          Texts.WriteString(W, "+");
          Files.ReadString(R, name);
          Texts.WriteString(W, name);
          InspectLoop(R, offs+8);
        END
      END;
      Texts.WriteLn(W); Texts.WriteLn(W);
      Texts.Append(Oberon.Log, W.buf);
    END
  END HeapAddress;

BEGIN Texts.OpenWriter(W);
END ORInspect.
