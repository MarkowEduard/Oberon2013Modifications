MODULE ResourceMonitor;
  IMPORT Kernel, Modules, Display, Fonts, Oberon;

  VAR
    t: Oberon.Task;
    status: INTEGER;
    installed: BOOLEAN;

  PROCEDURE DrawText(text: ARRAY OF CHAR; xx, yy: INTEGER);
  VAR
    dx, x, y, t1, t2, patAdr, i: INTEGER;
  BEGIN
    i := 0;
    WHILE text[i] # 0X DO
      Fonts.GetPat(Fonts.Default, text[i], dx, x, y, t1, t2, patAdr);
      Display.CopyPattern(Display.white, patAdr, xx + x, yy + y, Display.replace);
      INC(xx, dx); INC(i)
    END
  END DrawText;

  PROCEDURE DrawMonitor;
    VAR label: ARRAY 4 OF CHAR;
  BEGIN
    Oberon.RemoveMarks(Display.Width-30, Display.Height-80,25,50);
    Display.ReplConst(Display.black, Display.Width-30, Display.Height-80, 26, 52, Display.replace);
    IF status # 0 THEN
        Display.ReplConst(Display.white, Display.Width-30, Display.Height-80, 25, 2, Display.replace);
        Display.ReplConst(Display.white, Display.Width-30, Display.Height-30, 25, 2, Display.replace);
        Display.ReplConst(Display.white, Display.Width-30, Display.Height-80, 2, 50, Display.replace);
        Display.ReplConst(Display.white, Display.Width-6, Display.Height-80, 2, 51, Display.replace);
        label[0] := CHR(30H + status DIV 10 MOD 10);
        label[1] := CHR(30H + status DIV 1 MOD 10);
        label[2] := "%";
        label[3] := 0X;
        DrawText(label, Display.Width-26, Display.Height-40);
        label[0] := CHR(30H + status DIV 1000 MOD 10);
        label[1] := CHR(30H + status DIV 100 MOD 10);
        DrawText(label, Display.Width-26, Display.Height-52);
        label[0] := CHR(30H + status DIV 100000 MOD 10);
        label[1] := CHR(30H + status DIV 10000 MOD 10);
        DrawText(label, Display.Width-26, Display.Height-64);
        label[0] := CHR(30H + status DIV 10000000 MOD 10);
        label[1] := CHR(30H + status DIV 1000000 MOD 10);
        label[2] := 0X;
        DrawText(label, Display.Width-26, Display.Height-76)
    END
  END DrawMonitor;

  PROCEDURE Run*;
  BEGIN
    IF ~installed THEN
      Oberon.Install(t);
      installed := TRUE
    END
  END Run;

  PROCEDURE Stop*;
  BEGIN
    IF installed THEN
      status := 0;
      DrawMonitor();
      Oberon.Remove(t);
      installed := FALSE
    END
  END Stop;

  PROCEDURE Refresh;
  BEGIN
    status := (Modules.AllocPtr * 100 DIV Kernel.heapOrg) +
              (Kernel.allocated * 100 DIV (Kernel.heapLim - Kernel.heapOrg)) * 100 +
              (Kernel.NofSectors * 100 DIV 10000H) * 10000 +
              Oberon.NofTasks * 1000000;
    DrawMonitor()
  END Refresh;

BEGIN
  status := 0;
  installed := FALSE;
  t := Oberon.NewTask(Refresh, 500);
END ResourceMonitor.
