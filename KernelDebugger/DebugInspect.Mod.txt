MODULE DebugInspect;
  IMPORT SYSTEM, Files, Modules, Texts, Oberon, DebugClient, ORInspect, ORStackInspect;

  VAR W: Texts.Writer;
    SymRoot: ORStackInspect.SymbolFile;

  PROCEDURE GetData(adr, len: INTEGER; VAR val: INTEGER);
  BEGIN
    IF len = 1 THEN
      ASSERT(DebugClient.GetMem(adr DIV 4 * 4, val)); val := ASR(val, (adr MOD 4) * 8) MOD 100H
    ELSIF len = 4 THEN
      ASSERT(DebugClient.GetMem(adr, val))
    ELSIF len # 0 THEN
      ASSERT(FALSE)
    END
  END GetData;

  PROCEDURE OpenInspectSymbolFile(M: Modules.Module) : Files.File;
  VAR i: INTEGER;
    name: ARRAY 32 OF CHAR;
  BEGIN i := 0;
    WHILE M.name[i] # 0X DO name[i] := M.name[i]; INC(i) END;
    name[i] := "."; name[i+1] := "i"; name[i+2] := "s"; name[i+3] := "R"; name[i+4] := 0X
  RETURN Files.Old(name)
  END OpenInspectSymbolFile;

  PROCEDURE Module*;
    VAR offs, beg, end, time: INTEGER;
      T: Texts.Text;
      F: Files.File;
      R: Files.Rider;
      S: Texts.Scanner;
      M: Modules.Module;
  BEGIN Texts.OpenScanner(S, Oberon.Par.text, Oberon.Par.pos); Texts.Scan(S);
    IF (S.class = Texts.Char) & (S.c = "^") THEN
      Oberon.GetSelection(T, beg, end, time);
      IF time >= 0 THEN
        Texts.OpenScanner(S, T, beg); Texts.Scan(S);
      END
    END;
    IF S.class = Texts.Name THEN
      Texts.WriteString(W, "DebugInspect.Module "); Texts.WriteString(W, S.s);
      M := DebugClient.modroot;
      WHILE (M # NIL) & (M.name # S.s) DO M := M.next END;
      IF M = NIL THEN
        Texts.WriteLn(W);
        Texts.WriteString(W, "Module not loaded");
      ELSE
        F := OpenInspectSymbolFile(M);
        IF F = NIL THEN
          Texts.WriteLn(W);
          Texts.WriteString(W, M.name);
          Texts.WriteString(W, ".isR not found");
        ELSE
          Files.Set(R, F, 0);
          Files.ReadInt(R, offs);
          Files.Set(R, F, offs);
          Files.ReadInt(R, offs);
          INC(offs, M.data);
          Texts.Append(Oberon.Log, W.buf);
          ORInspect.InspectLoop(R, offs, -1, "", GetData, "DebugInspect.");
        END
      END;
      Texts.WriteLn(W); Texts.WriteLn(W);
      Texts.Append(Oberon.Log, W.buf);
    END
  END Module;

  PROCEDURE HeapAddress*;
    VAR offs, i, end, time: INTEGER;
      T: Texts.Text;
      F: Files.File;
      S: Texts.Scanner;
      M: Modules.Module;
  BEGIN Texts.OpenScanner(S, Oberon.Par.text, Oberon.Par.pos); Texts.Scan(S);
    IF (S.class = Texts.Char) & (S.c = "^") THEN
      Oberon.GetSelection(T, i, end, time);
      IF time >= 0 THEN
        Texts.OpenScanner(S, T, i); Texts.Scan(S);
      END
    END;
    IF S.class = Texts.Int THEN
      offs := S.i;
      IF offs = 0 THEN i := 0 ELSE ASSERT(DebugClient.GetMem(offs-8, i)) END;
      Texts.WriteString(W, "DebugInspect.HeapAddress 0"); ORInspect.WriteHex(W, offs, 8);
      Texts.WriteString(W, "H");
      M := DebugClient.modroot;
      WHILE (M # NIL) & ((i < M.data) OR (i >= M.code)) DO M := M.next END;
      IF M = NIL THEN
        Texts.WriteLn(W);
        Texts.WriteString(W, "Invalid type descriptor ");
        ORInspect.WriteHex(W, i, 8);
      ELSE
        F := OpenInspectSymbolFile(M);
        IF F = NIL THEN
          Texts.WriteLn(W);
          Texts.WriteString(W, M.name);
          Texts.WriteString(W, ".isR not found");
        ELSE
          Texts.Append(Oberon.Log, W.buf);
          ORInspect.InspectHeap(M.name, offs, i - M.data, 0, F, GetData, "DebugInspect.");
        END
      END;
      Texts.WriteLn(W); Texts.WriteLn(W);
      Texts.Append(Oberon.Log, W.buf);
    END
  END HeapAddress;

  PROCEDURE TypeRest*;
    VAR doff, skip, rest, i, j, time: INTEGER;
      ch: CHAR;
      buf: ARRAY 1024 OF BYTE;
      T: Texts.Text;
      F: Files.File;
      S: Texts.Scanner;
      M: Modules.Module;
  BEGIN Texts.OpenScanner(S, Oberon.Par.text, Oberon.Par.pos); Texts.Scan(S);
    IF (S.class = Texts.Char) & (S.c = "^") THEN
      Oberon.GetSelection(T, i, j, time);
      IF time >= 0 THEN
        Texts.OpenScanner(S, T, i); Texts.Scan(S);
      END
    END;
    IF S.class = Texts.Int THEN doff := S.i; Texts.Scan(S) END;
    IF S.class = Texts.Int THEN skip := S.i; Texts.Scan(S) END;
    IF S.class = Texts.Int THEN
      rest := S.i;
      IF rest > 1024 THEN
        Texts.WriteLn(W);
        Texts.WriteString(W, "Rest length too large");
        Texts.WriteLn(W);
      ELSIF S.nextCh = " " THEN
        FOR i := 0 TO rest - 1 DO
          Texts.Read(S, ch);
          ASSERT(("0" <= ch) & (ch <= "9") OR ("A" <= ch) & (ch <= "F"));
          IF ch <= "9" THEN j := ORD(ch) - 30H ELSE j := ORD(ch) - 37H END;
          Texts.Read(S, ch);
          ASSERT(("0" <= ch) & (ch <= "9") OR ("A" <= ch) & (ch <= "F"));
          IF ch <= "9" THEN buf[i] := j * 10H + ORD(ch) - 30H ELSE buf[i] := j * 10H + ORD(ch) - 37H END;
        END;
        M := DebugClient.modroot;
        WHILE (M # NIL) & ((doff < M.data) OR (doff >= M.code)) DO M := M.next END;
        IF M = NIL THEN
          Texts.WriteLn(W);
          Texts.WriteString(W, "Invalid type descriptor ");
          ORInspect.WriteHex(W, doff, 8);
        ELSE
          F := OpenInspectSymbolFile(M);
          IF F = NIL THEN
            Texts.WriteLn(W);
            Texts.WriteString(W, M.name);
            Texts.WriteString(W, ".isR not found");
          ELSE
            Texts.Append(Oberon.Log, W.buf);
            ORInspect.InspectHeap(M.name, SYSTEM.ADR(buf[0]), doff - M.data, skip, F, ORInspect.GetData, "DebugInspect.")
          END
        END;
        Texts.WriteLn(W);
      END;
      Texts.Append(Oberon.Log, W.buf);
    END
  END TypeRest;

  PROCEDURE LoadModule(M: Modules.Module);
  VAR i: INTEGER;
    F: Files.File;
    sf: ORStackInspect.SymbolFile;
    name: Modules.ModuleName;
  BEGIN i := 0;
    WHILE M.name[i] # 0X DO name[i] := M.name[i]; INC(i) END;
    name[i] := "."; name[i+1] := "s"; name[i+2] := "s"; name[i+3] := "R"; name[i+4] := 0X;
    F := Files.Old(name);
    Texts.WriteString(W, name);
    IF F = NIL THEN
      Texts.WriteString(W, " not found");
    ELSE
      NEW(sf);
      ORStackInspect.InitSymbolFile(sf, SymRoot, F, M.name);
      sf.name := M.name;
      SymRoot := sf;
      Texts.WriteString(W, " loaded");
    END;
    Texts.WriteLn(W)
  END LoadModule;

  PROCEDURE Backtrace*;
    VAR regs: DebugClient.Regs;
  BEGIN
    ASSERT(DebugClient.GetRegs(regs));
    ORStackInspect.InspectBacktrace(regs[14], DebugClient.allocPtr, DebugClient.modroot, SymRoot, GetData, "DebugInspect.");
  END Backtrace;

  PROCEDURE Load*;
    VAR beg, end, time: INTEGER;
      T: Texts.Text;
      S: Texts.Scanner;
      M: Modules.Module;
  BEGIN Texts.OpenScanner(S, Oberon.Par.text, Oberon.Par.pos); Texts.Scan(S);
    IF (S.class = Texts.Char) & (S.c = "^") THEN
      Oberon.GetSelection(T, beg, end, time);
      IF time >= 0 THEN
        Texts.OpenScanner(S, T, beg); Texts.Scan(S);
      END
    END;
    IF S.class = Texts.Name THEN
      M := DebugClient.modroot;
      WHILE (M # NIL) & (M.name # S.s) DO M := M.next END;
      IF M = NIL THEN
        Texts.WriteString(W, "Module not loaded");
      ELSE
        LoadModule(M)
      END;
      Texts.Append(Oberon.Log, W.buf)
    END
  END Load;

  PROCEDURE LoadAll*;
  VAR
    M: Modules.Module;
    sf: ORStackInspect.SymbolFile;
  BEGIN M := DebugClient.modroot;
    WHILE M # NIL DO
      sf := SymRoot;
      WHILE (sf # NIL) & (sf.name # M.name) DO sf := sf.next END;
      IF sf = NIL THEN LoadModule(M) END;
      M := M.next
    END;
    Texts.WriteString(W, "Done."); Texts.WriteLn(W);
    Texts.Append(Oberon.Log, W.buf)
  END LoadAll;

BEGIN Texts.OpenWriter(W); SymRoot := NIL
END DebugInspect.
