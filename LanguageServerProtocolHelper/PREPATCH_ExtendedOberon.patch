(Prepatch does not contain ORP.Mod.txt - use unpatched input file for  postpatch!)

--- LSPhORS.Mod.txt
+++ LSPhORS.Mod.txt
@@ -1,4 +1,4 @@
-MODULE ORS; (* NW 19.9.93 / 20.3.2017  Scanner in Oberon-07 / AP 1.10.21 Extended Oberon*)
+MODULE ORS; (* NW 19.9.93 / 15.3.2017  Scanner in Oberon-07*)
   IMPORT SYSTEM, Texts, Oberon;
 
 (* Oberon Scanner does lexical analysis. Input is Oberon-Text, output is
@@ -28,7 +28,7 @@
     to* = 50; by* = 51; semicolon* = 52; bar* = 53; end* = 54;
     else* = 55; elsif* = 56; until* = 57; return* = 58;
     array* = 60; record* = 61; pointer* = 62; const* = 63; type* = 64;
-    var* = 65; procedure* = 66; begin* = 67; import* = 68; module* = 69; final* = 70; eot = 71;
+    var* = 65; procedure* = 66; begin* = 67; import* = 68; module* = 69; eot = 70;
 
   TYPE Ident* = ARRAY IdLen OF CHAR;
 
--- LSPhORB.Mod.txt
+++ LSPhORB.Mod.txt
@@ -1,4 +1,4 @@
-MODULE ORB;   (*NW 25.6.2014  / AP 4.3.2020 / 5.3.2019  in Oberon-07 / AP 13.5.20 Extended Oberon*)
+MODULE ORB;   (*NW 25.6.2014  / AP 4.3.2020 / 8.3.2019  in Oberon-07*)
   IMPORT Files, ORS;
   (*Definition of data types Object and Type, which together form the data structure
     called "symbol table". Contains procedures for creation of Objects, and for search:
@@ -24,7 +24,7 @@
 
     ObjDesc*= RECORD
       class*, exno*: BYTE;
-      expo*, rdo*: BOOLEAN;  (*exported / read-only*)
+      expo*, rdo*: BOOLEAN;   (*exported / read-only*)
       lev*: INTEGER;
       next*, dsc*: Object;
       type*: Type;
@@ -72,7 +72,7 @@
   PROCEDURE NewObj*(VAR obj: Object; id: ORS.Ident; class: INTEGER);  (*insert new Object with name id*)
     VAR new, x: Object;
   BEGIN x := topScope;
-    WHILE (x.next # NIL) & ((x.next.name # id) OR (x.next.class = Mod) & ~x.next.rdo) DO x := x.next END ;
+    WHILE (x.next # NIL) & (x.next.name # id) DO x := x.next END ;
     IF x.next = NIL THEN
       NEW(new); new.name := id; new.class := class; new.next := NIL; new.rdo := FALSE; new.dsc := NIL;
       x.next := new; obj := new
@@ -84,7 +84,7 @@
     VAR s, x: Object;
   BEGIN s := topScope;
     REPEAT x := s.next;
-      WHILE (x # NIL) & ((x.name # ORS.id) OR (x.class = Mod) & ~x.rdo) DO x := x.next END ;
+      WHILE (x # NIL) & (x.name # ORS.id) DO x := x.next END ;
       s := s.dsc
     UNTIL (x # NIL) OR (s = NIL);
     RETURN x
@@ -93,9 +93,12 @@
   PROCEDURE thisimport*(mod: Object): Object;
     VAR obj: Object;
   BEGIN
-    IF mod.rdo & (mod.name[0] # 0X) THEN
-      obj := mod.dsc;
-      WHILE (obj # NIL) & (obj.name # ORS.id) DO obj := obj.next END
+    IF mod.rdo THEN
+      IF mod.name[0] # 0X THEN
+        obj := mod.dsc;
+        WHILE (obj # NIL) & (obj.name # ORS.id) DO obj := obj.next END
+      ELSE obj := NIL
+      END
     ELSE obj := NIL
     END ;
     RETURN obj
@@ -179,7 +182,7 @@
     REPEAT FName[i]:= ext[j]; INC(i); INC(j) UNTIL ext[j] = 0X;
     FName[i] := 0X
   END MakeFileName;
-
+  
   PROCEDURE ThisModule(name, orgname: ORS.Ident; decl: BOOLEAN; key: LONGINT): Object;
     VAR mod: Module; obj, obj1: Object;
   BEGIN obj1 := topScope; obj := obj1.next;  (*search for module*)
@@ -228,9 +231,36 @@
         Files.ReadNum(R, t.size);
         Read(R, class); last := NIL;
         WHILE class # 0 DO  (*fields*)
+  (* GARBAGE FROM PREPATCH BELOW *)
           NEW(fld); fld.class := class; Files.ReadString(R, fld.name);
           IF last = NIL THEN t.dsc := fld ELSE last.next := fld END ;
           last := fld;
+          IF fld.name[0] # 0X THEN fld.expo := TRUE; InType(R, thismod, fld.type) ELSE fld.expo := FALSE; fld.type := nilType END ;
+          Files.ReadNum(R, fld.val); Read(R, class)
+        END ;
+        IF last = NIL THEN t.dsc := obj ELSE last.next := obj END
+      ELSIF form = Proc THEN
+        InType(R, thismod, t.base);
+        obj := NIL; np := 0; Read(R, class);
+        WHILE class # 0 DO  (*parameters*)
+          NEW(par); par.class := class; Read(R, readonly); par.rdo := readonly = 1; 
+          InType(R, thismod, par.type); par.next := obj; obj := par; INC(np); Read(R, class)
+        END ;
+        t.dsc := obj; t.nofpar := np; t.size := 4
+      END ;
+      Files.ReadString(R, modname);
+      IF modname[0] #  0X THEN  (*re-import ========*)
+        Files.ReadInt(R, key); Files.ReadString(R, name);
+        mod := ThisModule(modname, modname, FALSE, key);
+        obj := mod.dsc;  (*search type*)
+        WHILE (obj # NIL) & (obj.name # name) DO obj := obj.next END ;
+        IF obj # NIL THEN T := obj.type   (*type object found in object list of mod*)
+        ELSE (*insert new type object in object list of mod*)
+          NEW(obj); obj.name := name; obj.class := Typ; obj.next := mod.dsc; mod.dsc := obj; obj.type := t;
+          t.mno := mod.lev; t.typobj := obj; T := t
+        END ;
+        typtab[ref] := T
+  (* GARBAGE FROM PREPATCH ABOVE *)
           IF fld.name[0] # 0X THEN fld.expo := TRUE; InType(R, thismod, fld.type); Files.ReadNum(R, fld.val)
           ELSE (*hidden*) fld.expo := FALSE;
             IF class = Const THEN (*type-bound procedure*) fld.type := byteType  (*method*)
@@ -268,15 +298,16 @@
       END
     END
   END InType;
-
+  
   PROCEDURE Import*(VAR modid, modid1: ORS.Ident);
     VAR key: LONGINT; class, k: INTEGER;
-      obj, thismod: Object; t: Type;
+      obj: Object;  t: Type;
+      thismod: Object;
       modname, fname: ORS.Ident;
       F: Files.File; R: Files.Rider;
   BEGIN
     IF modid1 = "SYSTEM" THEN
-      thismod := ThisModule(modid, modid1, TRUE, key); DEC(nofmod);
+      thismod := ThisModule(modid, modid1, TRUE,  key); DEC(nofmod);
       thismod.lev := 0; thismod.dsc := system; thismod.rdo := TRUE
     ELSE MakeFileName(fname, modid1, ".smb"); F := Files.Old(fname);
       IF F # NIL THEN
@@ -343,13 +374,22 @@
       ELSIF t.form = Array THEN OutType(R, t.base); Files.WriteNum(R, t.len); Files.WriteNum(R, t.size)
       ELSIF t.form = Record THEN
         IF t.base # NIL THEN OutType(R, t.base); bot := t.base.dsc ELSE OutType(R, noType); bot := NIL END ;
-        IF obj # NIL THEN
-          IF t.mno > 0 THEN Files.WriteNum(R, t.len) ELSE Files.WriteNum(R, obj.exno) END
-        ELSE Write(R, 0)
-        END ;
+        IF obj # NIL THEN Files.WriteNum(R, obj.exno) ELSE Write(R, 0) END ;
         Files.WriteNum(R, t.nofpar); Files.WriteNum(R, t.size);
         fld := t.dsc;
         WHILE fld # bot DO  (*fields*)
+          IF fld.expo THEN
+            Write(R, Fld); Files.WriteString(R, fld.name); OutType(R, fld.type); Files.WriteNum(R, fld.val)  (*offset*)
+          ELSE FindHiddenPointers(R, fld.type, fld.val)
+          END ;
+          fld := fld.next
+        END ;
+        Write(R, 0)
+      ELSIF t.form = Proc THEN OutType(R, t.base); OutPar(R, t.dsc, t.nofpar); Write(R, 0)
+      END ;
+      IF (t.mno > 0) & (obj # NIL) THEN  (*re-export, output name*)
+        mod := topScope.next;
+  (* GARBAGE FROM PREPATCH ABOVE *)
           IF fld.class = Const THEN (*type-bound procedure*) Write(R, Const);
             IF fld.expo THEN Files.WriteString(R, fld.name); OutType(R, fld.type);
               IF t.mno > 0 THEN Files.WriteNum(R, fld.val) ELSE Files.WriteNum(R, fld.exno) END  (*exno*)
@@ -375,13 +415,13 @@
       END
     END
   END OutType;
-
+  
   PROCEDURE Export*(VAR modid: ORS.Ident; VAR newSF: BOOLEAN; VAR key: LONGINT);
     VAR x, sum, oldkey: LONGINT;
       obj, obj0: Object;
       filename: ORS.Ident;
       F, F1: Files.File; R, R1: Files.Rider;
-  BEGIN Ref := TProc + 1; MakeFileName(filename, modid, ".smb");
+  BEGIN Ref := Record + 1; MakeFileName(filename, modid, ".smb");
     F := Files.New(filename); Files.Set(R, F, 0);
     Files.WriteInt(R, 0); (*placeholder*)
     Files.WriteInt(R, 0); (*placeholder for key to be inserted at the end*)
@@ -502,5 +542,5 @@
   enter("LDPSR", SProc, noType, 131);
   enter("COPY", SProc, noType, 123);
   enter("PUT", SProc, noType, 112);
-  enter("GET", SProc, noType, 102)
+  enter("GET", SProc, noType, 102);
 END ORB.
--- LSPhORG.Mod.txt
+++ LSPhORG.Mod.txt
@@ -1,7 +1,7 @@
-MODULE ORG; (* N.Wirth, 16.4.2016 / 4.4.2017 / 31.5.2019  Oberon compiler; code generator for RISC / AP 1.11.21 Extended Oberon*)
+MODULE ORG; (* N.Wirth, 16.4.2016 / 4.4.2017 / 31.5.2019  Oberon compiler; code generator for RISC*)
   IMPORT SYSTEM, Files, ORS, ORB;
   (*Code generator for Oberon compiler for RISC processor.
-     Procedural interface to Parser ORP; result in array "code".
+     Procedural interface to Parser OSAP; result in array "code".
      Procedure Close writes code-files*)
 
   CONST WordSize* = 4;
@@ -49,10 +49,13 @@
     fixorgP, fixorgD, fixorgT, fixorgM: LONGINT;   (*origins of lists of locations to be fixed up by loader*)
     check: BOOLEAN;  (*emit run-time checks*)
     version: INTEGER;  (* 0 = RISC-0, 1 = RISC-5 *)
-
+    
     relmap: ARRAY 6 OF INTEGER;  (*condition codes for relations*)
     code: ARRAY maxCode OF LONGINT;
-    str: ARRAY maxStrx OF CHAR;  (*strings*)
+    data: ARRAY maxTD OF LONGINT;  (*type descriptors*)
+    str: ARRAY maxStrx OF CHAR;
+
+  (* data FROM PREPATCH ABOVE *)   (*strings*)
     td: ARRAY maxTD OF LONGINT;  (*type descriptors*)
 
   (*instruction assemblers according to formats*)
@@ -63,14 +66,14 @@
   END incR;
 
   PROCEDURE Put0(op, a, b, c: LONGINT);
-  BEGIN (*emit format-0 register instruction*)
-    code[pc] := ((a*C4 + b) * C4 + op) * C16 + c; INC(pc)
+  BEGIN (*emit format-0 instruction*)
+    code[pc] := ((a*10H + b) * 10H + op) * 10000H + c; INC(pc)
   END Put0;
 
   PROCEDURE Put1(op, a, b, im: LONGINT);
-  BEGIN (*emit format-1 register instruction, -C16 <= im < C16*)
+  BEGIN (*emit format-1 instruction,  -10000H <= im < 10000H*)
     IF im < 0 THEN INC(op, V) END ;
-    code[pc] := (((a+C6) * C4 + b) * C4 + op) * C16 + im MOD C16; INC(pc)
+    code[pc] := (((a+40H) * 10H + b) * 10H + op) * 10000H + (im MOD 10000H); INC(pc)
   END Put1;
 
   PROCEDURE Put1a(op, a, b, im: LONGINT);
@@ -96,14 +99,16 @@
 
   PROCEDURE Put2(op, a, b, off: LONGINT);
   BEGIN (*emit load/store instruction*)
-    code[pc] := ((op * C4 + a) * C4 + b) * C20 + off MOD C20; INC(pc)
+    code[pc] := ((op * 10H + a) * 10H + b) * 100000H + (off MOD 100000H); INC(pc)
   END Put2;
 
   PROCEDURE Put3(op, cond, off: LONGINT);
   BEGIN (*emit branch instruction*)
-    code[pc] := ((op+12) * C4 + cond) * C24 + off MOD C24; INC(pc)
+    code[pc] := ((op+12) * 10H + cond) * 1000000H + (off MOD 1000000H); INC(pc)
   END Put3;
 
+  PROCEDURE incR;
+  (* GARBAGE FROM PREPATCH ABOVE *)
   PROCEDURE Put3a(op, mno, pno, disp: LONGINT);
   BEGIN (*emit modified branch instruction to be fixed up by loader, 0 <= mno < 64*)
     code[pc] := (((op+12) * C6 + mno) * C8 + pno) * C14 + disp MOD C14; INC(pc)
@@ -148,6 +153,12 @@
     RETURN cond
   END negated;
 
+  PROCEDURE fix(at, with: LONGINT);
+  BEGIN code[at] := code[at] DIV C24 * C24 + (with MOD C24)
+  END fix;
+
+  PROCEDURE FixOne*(at: LONGINT);
+  (* GARBAGE FROM PREPATCH ABOVE *)
   PROCEDURE fix1(at, with: LONGINT);
     VAR v: LONGINT;
   BEGIN (*fix format-1 register instruction*)
@@ -164,32 +175,26 @@
   BEGIN fix3(at, pc-at-1)
   END FixOne;
 
-  PROCEDURE FixLinkWith(L, dst: LONGINT);
-    VAR L1: LONGINT;
-  BEGIN (*fix chain of branch instructions*)
-    WHILE L # 0 DO L1 := code[L] MOD C24; fix3(L, dst-L-1); L := L1 END
-  END FixLinkWith;
-
   PROCEDURE FixLink*(L: LONGINT);
-  BEGIN FixLinkWith(L, pc)
+    VAR L1: LONGINT;
+  BEGIN
+    WHILE L # 0 DO L1 := code[L] MOD 40000H; fix(L, pc-L-1); L := L1 END
   END FixLink;
 
-  PROCEDURE FixLinkPair(L, adr: LONGINT);
-    VAR L1: LONGINT; p, q: INTEGER;
-  BEGIN (*fix chain of instruction pairs with an address that is spread across both instructions, 0 <= adr < C24*)
-    WHILE L # 0 DO p := code[L-1]; q := code[L];
-      L1 := p DIV C12 MOD C8 + q MOD C16;
-      code[L-1] := p DIV C20 * C20 + adr DIV C16 MOD C8 * C12 + p MOD C12;
-      code[L] := q DIV C16 * C16 + adr MOD C16;
-      L := L1
+  PROCEDURE FixLinkWith(L0, dst: LONGINT);
+    VAR L1: LONGINT;
+  BEGIN
+    WHILE L0 # 0 DO
+      L1 := code[L0] MOD C24;
+      code[L0] := code[L0] DIV C24 * C24 + ((dst - L0 - 1) MOD C24); L0 := L1
     END
-  END FixLinkPair;
+  END FixLinkWith;
 
   PROCEDURE merged(L0, L1: LONGINT): LONGINT;
     VAR L2, L3: LONGINT;
-  BEGIN (*merge chains of the two operands of AND and OR*)
+  BEGIN 
     IF L0 # 0 THEN L3 := L0;
-      REPEAT L2 := L3; L3 := code[L2] MOD C16 UNTIL L3 = 0;
+      REPEAT L2 := L3; L3 := code[L2] MOD 40000H UNTIL L3 = 0;
       code[L2] := code[L2] + L1; L1 := L0
     END ;
     RETURN L1
@@ -243,13 +248,13 @@
   PROCEDURE loadCond(VAR x: Item);
   BEGIN
     IF x.mode # Cond THEN
-      IF x.type.form = ORB.Bool THEN
-        IF x.mode = ORB.Const THEN x.r := 15 - x.a*8
-        ELSE load(x);
-          IF code[pc-1] DIV C30 # F2 THEN Put1(Cmp, x.r, x.r, 0) END ;
-          x.r := NE; DEC(RH)
-        END ;
-        x.mode := Cond; x.a := 0; x.b := 0
+    IF x.type.form = ORB.Bool THEN
+      IF x.mode = ORB.Const THEN x.r := 15 - x.a*8
+      ELSE load(x);
+        IF code[pc-1] DIV 40000000H # -2 THEN Put1(Cmp, x.r, x.r, 0) END ;
+        x.r := NE; DEC(RH)
+      END ;
+      x.mode := Cond; x.a := 0; x.b := 0
       ELSE ORS.Mark("not Boolean?")
       END
     END
@@ -633,7 +638,7 @@
   BEGIN
     IF (y.mode = ORB.Const) & (y.type.form # ORB.Proc) THEN
       load(x);
-      IF (y.a # 0) OR ~(op IN {ORS.eql, ORS.neq}) OR (code[pc-1] DIV C30 # F2) THEN Put1a(Cmp, x.r, x.r, y.a) END ;
+      IF (y.a # 0) OR ~(op IN {ORS.eql, ORS.neq}) OR (code[pc-1] DIV 40000000H # -2) THEN Put1a(Cmp, x.r, x.r, y.a) END ;
       DEC(RH)
     ELSE
       IF (x.mode = Cond) OR (y.mode = Cond) THEN ORS.Mark("not implemented") END ;
@@ -1120,8 +1125,7 @@
   END Condition;
 
   PROCEDURE Open*(v: INTEGER);
-  BEGIN pc := 0; final := -1; strx := 0; tdw := 0; RH := 0; check := v # 0; version := v;
-    fixorgP := 0; fixorgD := 0; fixorgT := 0; fixorgM := 0;
+  BEGIN pc := 0; tdx := 0; strx := 0; RH := 0; fixorgP := 0; fixorgD := 0; fixorgT := 0; check := v # 0; version := v;
     IF v = 0 THEN pc := 1;
       REPEAT code[pc] := 0; INC(pc) UNTIL pc = 8
     END
@@ -1133,16 +1137,20 @@
 
   PROCEDURE Header*;
   BEGIN entry := pc*4;
-    IF version = 0 THEN code[0] := BCT - 1 + pc;  Put1a(Mov, SP, 0, StkOrg0)  (*RISC-0*)
+    IF version = 0 THEN code[0] := 0E7000000H-1 + pc;  Put1a(Mov, SP, 0, StkOrg0)  (*RISC-0*)
     ELSE Put1(Sub, SP, SP, 4); Put2(Str, LNK, SP, 0)
     END
   END Header;
 
+  PROCEDURE NofPtrs(typ: ORB.Type): LONGINT;
+  (* GARBAGE FROM PREPATCH ABOVE *)
   PROCEDURE Exit*;
-  BEGIN (*exit code*)
+      name: ORS.Ident;
+      F: Files.File; R: Files.Rider;
+  BEGIN  (*exit code*)
     IF version = 0 THEN Put1(Mov, 0, 0, 0); Put3(BR, 7, 0)  (*RISC-0*)
     ELSE Put2(Ldr, LNK, SP, 0); Put1(Add, SP, SP, 4); Put3(BR, 7, LNK)
-    END
+    END ;
   END Exit;
 
   PROCEDURE Final*;
@@ -1250,10 +1258,9 @@
       obj := obj.next
     END ;
     Files.WriteInt(R, -1);
-    Files.WriteInt(R, fixorgP); Files.WriteInt(R, fixorgD); Files.WriteInt(R, fixorgT); Files.WriteInt(R, fixorgM);
-    Files.WriteInt(R, entry); Files.WriteInt(R, final);
+    Files.WriteInt(R, fixorgP); Files.WriteInt(R, fixorgD); Files.WriteInt(R, fixorgT); Files.WriteInt(R, entry);
     Files.Write(R, "O"); Files.Register(F)
   END Close;
 
-BEGIN relmap[0] := 1; relmap[1] := 9; relmap[2] := 5; relmap[3] := 6; relmap[4] := 14; relmap[5] := 13
+BEGIN relmap[0] := 1; relmap[1] := 9; relmap[2] := 5; relmap[3] := 6; relmap[4] := 14; relmap[5] := 13;
 END ORG.
