MODULE RealCalc;
  IMPORT Texts, Oberon;

  VAR
    s: Texts.Scanner;
    log: Texts.Writer;

  PROCEDURE ReadReal() : REAL;
    VAR
      val : REAL;
      beg, end, time: INTEGER;
      t: Texts.Text;
  BEGIN
    Texts.Scan(s);
    IF (s.class = Texts.Char) & (s.c = "^") THEN
      Oberon.GetSelection(t, beg, end, time);
      IF time >= 0 THEN
        Texts.OpenScanner(s, t, beg); Texts.Scan(s);
      END
    END;
    IF s.class = Texts.Char THEN
      IF s.c = "+" THEN
        val := ReadReal() + ReadReal();
      ELSIF s.c = "-" THEN
        val := ReadReal() - ReadReal();
      ELSIF s.c = "~" THEN
        val := - ReadReal();
      ELSIF s.c = "*" THEN
        val := ReadReal() * ReadReal();
      ELSIF s.c = "/" THEN
        val := ReadReal() / ReadReal();
      ELSIF s.c = "#" THEN
        val := ABS(ReadReal());
      ELSIF s.c = "<" THEN
        val := FLT(FLOOR(ReadReal()));
      ELSE
        val := 0.0;
        Texts.WriteString(log, "Invalid operator ");
        Texts.Write(log, s.c);
        Texts.WriteLn(log);
      END
    ELSIF s.class = Texts.Int THEN
      val := FLT(s.i);
    ELSIF s.class = Texts.Real THEN
      val := s.x;
    ELSE
        val := 0.0;
        Texts.WriteString(log, "Invalid token");
        Texts.WriteLn(log);
    END;
    RETURN val
  END ReadReal;

  PROCEDURE Real*();
  BEGIN
    Texts.OpenWriter(log);
    Texts.OpenScanner(s, Oberon.Par.text, Oberon.Par.pos);
    Texts.WriteReal(log, ReadReal(), 20);
    Texts.WriteLn(log);
    Texts.Append(Oberon.Log, log.buf);
  END Real;

  PROCEDURE Floor*();
  BEGIN
    Texts.OpenWriter(log);
    Texts.OpenScanner(s, Oberon.Par.text, Oberon.Par.pos);
    Texts.WriteInt(log, FLOOR(ReadReal()), 15);
    Texts.WriteLn(log);
    Texts.Append(Oberon.Log, log.buf);
  END Floor;

END RealCalc.
