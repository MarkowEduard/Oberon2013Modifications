MODULE Calc;
  IMPORT SYSTEM, Texts, Oberon;

  VAR
    s: Texts.Scanner;
    log: Texts.Writer;

  PROCEDURE ReadInt() : INTEGER;
    VAR
      val, beg, end, time: INTEGER;
      t: Texts.Text;
  BEGIN
    Texts.Scan(s);
    IF (s.class = Texts.Char) & (s.c = "^") THEN
      Oberon.GetSelection(t, beg, end, time);
      IF time >= 0 THEN
        Texts.OpenScanner(s, t, beg); Texts.Scan(s);
      END
    END;
    IF s.class = Texts.Char THEN
      IF s.c = "+" THEN
        val := ReadInt() + ReadInt();
      ELSIF s.c = "-" THEN
        val := ReadInt() - ReadInt();
      ELSIF s.c = "~" THEN
        val := -ReadInt();
      ELSIF s.c = "*" THEN
        val := ReadInt() * ReadInt();
      ELSIF s.c = "/" THEN
        val := ReadInt() DIV ReadInt();
      ELSIF s.c = "%" THEN
        val := ReadInt() MOD ReadInt();
      ELSIF s.c = "&" THEN
        val := SYSTEM.VAL(INTEGER, SYSTEM.VAL(SET, ReadInt()) * SYSTEM.VAL(SET, ReadInt()));
      ELSIF s.c = "|" THEN
        val := SYSTEM.VAL(INTEGER, SYSTEM.VAL(SET, ReadInt()) + SYSTEM.VAL(SET, ReadInt()));
      ELSIF s.c = ":" THEN
        val := SYSTEM.VAL(INTEGER, SYSTEM.VAL(SET, ReadInt()) / SYSTEM.VAL(SET, ReadInt()));
      ELSIF s.c = "!" THEN
        val := SYSTEM.VAL(INTEGER, -SYSTEM.VAL(SET, ReadInt()));
      ELSIF s.c = "#" THEN
        val := ABS(ReadInt());
      ELSIF s.c = "?" THEN
        val := ORD(ODD(ReadInt()));
      ELSIF s.c = "<" THEN
        val := LSL(ReadInt(), ReadInt());
      ELSIF s.c = ">" THEN
        val := ASR(ReadInt(), ReadInt());
      ELSIF s.c = "=" THEN
        val := ROR (ReadInt(), ReadInt());
      ELSE
        val := 0;
        Texts.WriteString(log, "Invalid operator ");
        Texts.Write(log, s.c);
        Texts.WriteLn(log);
      END
    ELSIF s.class = Texts.Int THEN
      val := s.i;
    ELSE
        val := 0;
        Texts.WriteString(log, "Invalid token");
        Texts.WriteLn(log);
    END;
    RETURN val
  END ReadInt;


  PROCEDURE Dec*();
  BEGIN
    Texts.OpenWriter(log);
    Texts.OpenScanner(s, Oberon.Par.text, Oberon.Par.pos);
    Texts.WriteInt(log, ReadInt(), 15);
    Texts.WriteLn(log);
    Texts.Append(Oberon.Log, log.buf);
  END Dec;

  PROCEDURE Hex*();
  BEGIN
    Texts.OpenWriter(log);
    Texts.OpenScanner(s, Oberon.Par.text, Oberon.Par.pos);
    Texts.WriteHex(log, ReadInt());
    Texts.WriteLn(log);
    Texts.Append(Oberon.Log, log.buf);
  END Hex;

END Calc.
